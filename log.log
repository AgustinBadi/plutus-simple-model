GHC Core to PLC plugin: E043:Error: Reference to a name which is not a local, a builtin, or an external INLINABLE function: Variable Plutus.Model.Validator.V2.Plutus.$s$fFoldable[]_$cfoldMap
            No unfolding
Context: Compiling expr: Plutus.Model.Validator.V2.Plutus.$s$fFoldable[]_$cfoldMap
Context: Compiling expr: Plutus.Model.Validator.V2.Plutus.$s$fFoldable[]_$cfoldMap
                           @PlutusLedgerApi.V2.Contexts.TxInInfo
Context: Compiling expr: Plutus.Model.Validator.V2.Plutus.$s$fFoldable[]_$cfoldMap
                           @PlutusLedgerApi.V2.Contexts.TxInInfo
                           ((\ (x2 [Occ=Once1!] :: PlutusLedgerApi.V2.Contexts.TxInInfo) ->
                               case x2 of wild [Occ=Once1]
                               { PlutusLedgerApi.V2.Contexts.TxInInfo _ [Occ=Dead]
                                                                      ds2 [Occ=Once1!] ->
                               case ds2 of
                               { PlutusLedgerApi.V2.Tx.TxOut ds4 [Occ=Once1!] _ [Occ=Dead]
                                                             _ [Occ=Dead] _ [Occ=Dead] ->
                               case ds4 of
                               { PlutusLedgerApi.V1.Address.Address ww3 [Occ=Once1]
                                                                    ww4 [Occ=Once1] ->
                               case PlutusLedgerApi.V1.Address.$w$c==
                                      ww3
                                      ww4
                                      addr
                                      (GHC.Maybe.Nothing
                                         @PlutusLedgerApi.V1.Credential.StakingCredential)
                               of {
                                 GHC.Types.False ->
                                   GHC.Maybe.Nothing @PlutusLedgerApi.V2.Contexts.TxInInfo;
                                 GHC.Types.True ->
                                   GHC.Maybe.Just @PlutusLedgerApi.V2.Contexts.TxInInfo wild
                               }
                               }
                               }
                               })
                            `cast` (<PlutusLedgerApi.V2.Contexts.TxInInfo>_R
                                    %<'Many>_N ->_R Sym (Data.Monoid.N:First[0]) <PlutusLedgerApi.V2.Contexts.TxInInfo>_N
                                    :: GHC.Types.Coercible
                                         (PlutusLedgerApi.V2.Contexts.TxInInfo
                                          -> GHC.Maybe.Maybe PlutusLedgerApi.V2.Contexts.TxInInfo)
                                         (PlutusLedgerApi.V2.Contexts.TxInInfo
                                          -> Data.Monoid.First PlutusLedgerApi.V2.Contexts.TxInInfo)))
Context: Compiling expr: Plutus.Model.Validator.V2.Plutus.$s$fFoldable[]_$cfoldMap
                           @PlutusLedgerApi.V2.Contexts.TxInInfo
                           ((\ (x2 [Occ=Once1!] :: PlutusLedgerApi.V2.Contexts.TxInInfo) ->
                               case x2 of wild [Occ=Once1]
                               { PlutusLedgerApi.V2.Contexts.TxInInfo _ [Occ=Dead]
                                                                      ds2 [Occ=Once1!] ->
                               case ds2 of
                               { PlutusLedgerApi.V2.Tx.TxOut ds4 [Occ=Once1!] _ [Occ=Dead]
                                                             _ [Occ=Dead] _ [Occ=Dead] ->
                               case ds4 of
                               { PlutusLedgerApi.V1.Address.Address ww3 [Occ=Once1]
                                                                    ww4 [Occ=Once1] ->
                               case PlutusLedgerApi.V1.Address.$w$c==
                                      ww3
                                      ww4
                                      addr
                                      (GHC.Maybe.Nothing
                                         @PlutusLedgerApi.V1.Credential.StakingCredential)
                               of {
                                 GHC.Types.False ->
                                   GHC.Maybe.Nothing @PlutusLedgerApi.V2.Contexts.TxInInfo;
                                 GHC.Types.True ->
                                   GHC.Maybe.Just @PlutusLedgerApi.V2.Contexts.TxInInfo wild
                               }
                               }
                               }
                               })
                            `cast` (<PlutusLedgerApi.V2.Contexts.TxInInfo>_R
                                    %<'Many>_N ->_R Sym (Data.Monoid.N:First[0]) <PlutusLedgerApi.V2.Contexts.TxInInfo>_N
                                    :: GHC.Types.Coercible
                                         (PlutusLedgerApi.V2.Contexts.TxInInfo
                                          -> GHC.Maybe.Maybe PlutusLedgerApi.V2.Contexts.TxInInfo)
                                         (PlutusLedgerApi.V2.Contexts.TxInInfo
                                          -> Data.Monoid.First PlutusLedgerApi.V2.Contexts.TxInInfo)))
                           ww
Context: Compiling expr: (Plutus.Model.Validator.V2.Plutus.$s$fFoldable[]_$cfoldMap
                            @PlutusLedgerApi.V2.Contexts.TxInInfo
                            ((\ (x2 [Occ=Once1!] :: PlutusLedgerApi.V2.Contexts.TxInInfo) ->
                                case x2 of wild [Occ=Once1]
                                { PlutusLedgerApi.V2.Contexts.TxInInfo _ [Occ=Dead]
                                                                       ds2 [Occ=Once1!] ->
                                case ds2 of
                                { PlutusLedgerApi.V2.Tx.TxOut ds4 [Occ=Once1!] _ [Occ=Dead]
                                                              _ [Occ=Dead] _ [Occ=Dead] ->
                                case ds4 of
                                { PlutusLedgerApi.V1.Address.Address ww3 [Occ=Once1]
                                                                     ww4 [Occ=Once1] ->
                                case PlutusLedgerApi.V1.Address.$w$c==
                                       ww3
                                       ww4
                                       addr
                                       (GHC.Maybe.Nothing
                                          @PlutusLedgerApi.V1.Credential.StakingCredential)
                                of {
                                  GHC.Types.False ->
                                    GHC.Maybe.Nothing @PlutusLedgerApi.V2.Contexts.TxInInfo;
                                  GHC.Types.True ->
                                    GHC.Maybe.Just @PlutusLedgerApi.V2.Contexts.TxInInfo wild
                                }
                                }
                                }
                                })
                             `cast` (<PlutusLedgerApi.V2.Contexts.TxInInfo>_R
                                     %<'Many>_N ->_R Sym (Data.Monoid.N:First[0]) <PlutusLedgerApi.V2.Contexts.TxInInfo>_N
                                     :: GHC.Types.Coercible
                                          (PlutusLedgerApi.V2.Contexts.TxInInfo
                                           -> GHC.Maybe.Maybe PlutusLedgerApi.V2.Contexts.TxInInfo)
                                          (PlutusLedgerApi.V2.Contexts.TxInInfo
                                           -> Data.Monoid.First PlutusLedgerApi.V2.Contexts.TxInInfo)))
                            ww)
                         `cast` (Data.Monoid.N:First[0] <PlutusLedgerApi.V2.Contexts.TxInInfo>_N
                                 :: GHC.Types.Coercible
                                      (Data.Monoid.First PlutusLedgerApi.V2.Contexts.TxInInfo)
                                      (GHC.Maybe.Maybe PlutusLedgerApi.V2.Contexts.TxInInfo))
Context: Compiling expr: case (Plutus.Model.Validator.V2.Plutus.$s$fFoldable[]_$cfoldMap
                                 @PlutusLedgerApi.V2.Contexts.TxInInfo
                                 ((\ (x2 [Occ=Once1!] :: PlutusLedgerApi.V2.Contexts.TxInInfo) ->
                                     case x2 of wild [Occ=Once1]
                                     { PlutusLedgerApi.V2.Contexts.TxInInfo _ [Occ=Dead]
                                                                            ds2 [Occ=Once1!] ->
                                     case ds2 of
                                     { PlutusLedgerApi.V2.Tx.TxOut ds4 [Occ=Once1!] _ [Occ=Dead]
                                                                   _ [Occ=Dead] _ [Occ=Dead] ->
                                     case ds4 of
                                     { PlutusLedgerApi.V1.Address.Address ww3 [Occ=Once1]
                                                                          ww4 [Occ=Once1] ->
                                     case PlutusLedgerApi.V1.Address.$w$c==
                                            ww3
                                            ww4
                                            addr
                                            (GHC.Maybe.Nothing
                                               @PlutusLedgerApi.V1.Credential.StakingCredential)
                                     of {
                                       GHC.Types.False ->
                                         GHC.Maybe.Nothing @PlutusLedgerApi.V2.Contexts.TxInInfo;
                                       GHC.Types.True ->
                                         GHC.Maybe.Just @PlutusLedgerApi.V2.Contexts.TxInInfo wild
                                     }
                                     }
                                     }
                                     })
                                  `cast` (<PlutusLedgerApi.V2.Contexts.TxInInfo>_R
                                          %<'Many>_N ->_R Sym (Data.Monoid.N:First[0]) <PlutusLedgerApi.V2.Contexts.TxInInfo>_N
                                          :: GHC.Types.Coercible
                                               (PlutusLedgerApi.V2.Contexts.TxInInfo
                                                -> GHC.Maybe.Maybe PlutusLedgerApi.V2.Contexts.TxInInfo)
                                               (PlutusLedgerApi.V2.Contexts.TxInInfo
                                                -> Data.Monoid.First PlutusLedgerApi.V2.Contexts.TxInInfo)))
                                 ww)
                              `cast` (Data.Monoid.N:First[0] <PlutusLedgerApi.V2.Contexts.TxInInfo>_N
                                      :: GHC.Types.Coercible
                                           (Data.Monoid.First PlutusLedgerApi.V2.Contexts.TxInInfo)
                                           (GHC.Maybe.Maybe PlutusLedgerApi.V2.Contexts.TxInInfo))
                         of {
                           GHC.Maybe.Nothing ->
                             case Suites.Plutus.Model.Script.V2.Onchain.Lend.$s$wforwardTo1 of
                             { PlutusLedgerApi.V2.Contexts.TxInInfo ds1 [Occ=Once1]
                                                                    ds2 [Occ=Once1] ->
                             jump $j ds1 ds2
                             };
                           GHC.Maybe.Just a2 [Occ=Once1!] ->
                             case a2 of
                             { PlutusLedgerApi.V2.Contexts.TxInInfo ds1 [Occ=Once1]
                                                                    ds2 [Occ=Once1] ->
                             jump $j ds1 ds2
                             }
                         }
Context: Compiling expr: join {
                           $j [InlPrag=[2], Occ=Once2!T[2]]
                             :: PlutusLedgerApi.V1.Tx.TxOutRef
                                -> PlutusLedgerApi.V2.Tx.TxOut -> GHC.Types.Bool
                           [LclId[JoinId(2)],
                            Arity=2,
                            Str=<1P(L,L)><A>,
                            Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
                                    WorkFree=True, Expandable=True,
                                    Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
                                    Tmpl= \ (w [Occ=Once1!] :: PlutusLedgerApi.V1.Tx.TxOutRef)
                                            _ [Occ=Dead] ->
                                            case w of
                                            { PlutusLedgerApi.V1.Tx.TxOutRef ww3 [Occ=Once1]
                                                                             ww4 [Occ=Once1] ->
                                            jump $w$j ww3 ww4
                                            }}]
                           $j (w [Occ=Once1!, OS=OneShot] :: PlutusLedgerApi.V1.Tx.TxOutRef)
                              _ [Occ=Dead, OS=OneShot]
                             = case w of
                               { PlutusLedgerApi.V1.Tx.TxOutRef ww3 [Occ=Once1] ww4 [Occ=Once1] ->
                               jump $w$j ww3 ww4
                               } } in
                         case (Plutus.Model.Validator.V2.Plutus.$s$fFoldable[]_$cfoldMap
                                 @PlutusLedgerApi.V2.Contexts.TxInInfo
                                 ((\ (x2 [Occ=Once1!] :: PlutusLedgerApi.V2.Contexts.TxInInfo) ->
                                     case x2 of wild [Occ=Once1]
                                     { PlutusLedgerApi.V2.Contexts.TxInInfo _ [Occ=Dead]
                                                                            ds2 [Occ=Once1!] ->
                                     case ds2 of
                                     { PlutusLedgerApi.V2.Tx.TxOut ds4 [Occ=Once1!] _ [Occ=Dead]
                                                                   _ [Occ=Dead] _ [Occ=Dead] ->
                                     case ds4 of
                                     { PlutusLedgerApi.V1.Address.Address ww3 [Occ=Once1]
                                                                          ww4 [Occ=Once1] ->
                                     case PlutusLedgerApi.V1.Address.$w$c==
                                            ww3
                                            ww4
                                            addr
                                            (GHC.Maybe.Nothing
                                               @PlutusLedgerApi.V1.Credential.StakingCredential)
                                     of {
                                       GHC.Types.False ->
                                         GHC.Maybe.Nothing @PlutusLedgerApi.V2.Contexts.TxInInfo;
                                       GHC.Types.True ->
                                         GHC.Maybe.Just @PlutusLedgerApi.V2.Contexts.TxInInfo wild
                                     }
                                     }
                                     }
                                     })
                                  `cast` (<PlutusLedgerApi.V2.Contexts.TxInInfo>_R
                                          %<'Many>_N ->_R Sym (Data.Monoid.N:First[0]) <PlutusLedgerApi.V2.Contexts.TxInInfo>_N
                                          :: GHC.Types.Coercible
                                               (PlutusLedgerApi.V2.Contexts.TxInInfo
                                                -> GHC.Maybe.Maybe PlutusLedgerApi.V2.Contexts.TxInInfo)
                                               (PlutusLedgerApi.V2.Contexts.TxInInfo
                                                -> Data.Monoid.First PlutusLedgerApi.V2.Contexts.TxInInfo)))
                                 ww)
                              `cast` (Data.Monoid.N:First[0] <PlutusLedgerApi.V2.Contexts.TxInInfo>_N
                                      :: GHC.Types.Coercible
                                           (Data.Monoid.First PlutusLedgerApi.V2.Contexts.TxInInfo)
                                           (GHC.Maybe.Maybe PlutusLedgerApi.V2.Contexts.TxInInfo))
                         of {
                           GHC.Maybe.Nothing ->
                             case Suites.Plutus.Model.Script.V2.Onchain.Lend.$s$wforwardTo1 of
                             { PlutusLedgerApi.V2.Contexts.TxInInfo ds1 [Occ=Once1]
                                                                    ds2 [Occ=Once1] ->
                             jump $j ds1 ds2
                             };
                           GHC.Maybe.Just a2 [Occ=Once1!] ->
                             case a2 of
                             { PlutusLedgerApi.V2.Contexts.TxInInfo ds1 [Occ=Once1]
                                                                    ds2 [Occ=Once1] ->
                             jump $j ds1 ds2
                             }
                         }
Context: Compiling expr: join {
                           $w$j [InlPrag=[2], Occ=T[2]]
                             :: PlutusLedgerApi.V1.Tx.TxId
                                -> GHC.Num.Integer.Integer -> GHC.Types.Bool
                           [LclId[JoinId(2)], Arity=2, Str=<L><L>]
                           $w$j (ww2 [Occ=OnceL1, OS=OneShot] :: PlutusLedgerApi.V1.Tx.TxId)
                                (ww3 [Occ=OnceL1, OS=OneShot] :: GHC.Num.Integer.Integer)
                             = let {
                                 ref [Occ=OnceL1] :: PlutusLedgerApi.V1.Tx.TxOutRef
                                 [LclId]
                                 ref = PlutusLedgerApi.V1.Tx.TxOutRef ww2 ww3 } in
                               join {
                                 $j1 [Occ=OnceL1!T[1]]
                                   :: PlutusLedgerApi.V1.Scripts.Redeemer -> GHC.Types.Bool
                                 [LclId[JoinId(1)], Arity=1, Str=<L>]
                                 $j1 (a1 [Occ=Once1, OS=OneShot]
                                        :: PlutusLedgerApi.V1.Scripts.Redeemer)
                                   = PlutusTx.Builtins.Internal.ifThenElse
                                       @GHC.Types.Bool
                                       (PlutusTx.Builtins.Internal.equalsData
                                          (a1
                                           `cast` (PlutusLedgerApi.V1.Scripts.N:Redeemer[0]
                                                   :: GHC.Types.Coercible
                                                        PlutusLedgerApi.V1.Scripts.Redeemer
                                                        PlutusTx.Builtins.Internal.BuiltinData))
                                          (Suites.Plutus.Model.Script.V2.Onchain.Lend.$fToDataLendAct_$ctoBuiltinData
                                             w2))
                                       GHC.Types.True
                                       GHC.Types.False } in
                               joinrec {
                                 go [Occ=LoopBreakerT[1]]
                                   :: [(PlutusLedgerApi.V1.Contexts.ScriptPurpose,
                                        PlutusLedgerApi.V1.Scripts.Redeemer)]
                                      -> GHC.Types.Bool
                                 [LclId[JoinId(1)], Arity=1, Str=<1L>]
                                 go (ds4 [Occ=Once1!]
                                       :: [(PlutusLedgerApi.V1.Contexts.ScriptPurpose,
                                            PlutusLedgerApi.V1.Scripts.Redeemer)])
                                   = case ds4 of {
                                       [] -> GHC.Types.False;
                                       : ds5 [Occ=Once1!] xs' [Occ=Once2] ->
                                         case ds5 of { (c' [Occ=Once1!], i [Occ=Once1]) ->
                                         case c' of {
                                           __DEFAULT -> jump go xs';
                                           PlutusLedgerApi.V1.Contexts.Spending ref1 [Occ=Once1] ->
                                             case PlutusLedgerApi.V1.Tx.$fEqTxOutRef_$c== ref1 ref of {
                                               GHC.Types.False -> jump go xs';
                                               GHC.Types.True -> jump $j1 i
                                             }
                                         }
                                         }
                                     }; } in
                               jump go
                                 (ww1
                                  `cast` (PlutusTx.AssocMap.N:Map[0]
                                              <PlutusLedgerApi.V1.Contexts.ScriptPurpose>_R
                                              <PlutusLedgerApi.V1.Scripts.Redeemer>_R
                                          :: GHC.Types.Coercible
                                               (PlutusTx.AssocMap.Map
                                                  PlutusLedgerApi.V1.Contexts.ScriptPurpose
                                                  PlutusLedgerApi.V1.Scripts.Redeemer)
                                               [(PlutusLedgerApi.V1.Contexts.ScriptPurpose,
                                                 PlutusLedgerApi.V1.Scripts.Redeemer)])) } in
                         join {
                           $j [InlPrag=[2], Occ=Once2!T[2]]
                             :: PlutusLedgerApi.V1.Tx.TxOutRef
                                -> PlutusLedgerApi.V2.Tx.TxOut -> GHC.Types.Bool
                           [LclId[JoinId(2)],
                            Arity=2,
                            Str=<1P(L,L)><A>,
                            Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
                                    WorkFree=True, Expandable=True,
                                    Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
                                    Tmpl= \ (w [Occ=Once1!] :: PlutusLedgerApi.V1.Tx.TxOutRef)
                                            _ [Occ=Dead] ->
                                            case w of
                                            { PlutusLedgerApi.V1.Tx.TxOutRef ww3 [Occ=Once1]
                                                                             ww4 [Occ=Once1] ->
                                            jump $w$j ww3 ww4
                                            }}]
                           $j (w [Occ=Once1!, OS=OneShot] :: PlutusLedgerApi.V1.Tx.TxOutRef)
                              _ [Occ=Dead, OS=OneShot]
                             = case w of
                               { PlutusLedgerApi.V1.Tx.TxOutRef ww3 [Occ=Once1] ww4 [Occ=Once1] ->
                               jump $w$j ww3 ww4
                               } } in
                         case (Plutus.Model.Validator.V2.Plutus.$s$fFoldable[]_$cfoldMap
                                 @PlutusLedgerApi.V2.Contexts.TxInInfo
                                 ((\ (x2 [Occ=Once1!] :: PlutusLedgerApi.V2.Contexts.TxInInfo) ->
                                     case x2 of wild [Occ=Once1]
                                     { PlutusLedgerApi.V2.Contexts.TxInInfo _ [Occ=Dead]
                                                                            ds2 [Occ=Once1!] ->
                                     case ds2 of
                                     { PlutusLedgerApi.V2.Tx.TxOut ds4 [Occ=Once1!] _ [Occ=Dead]
                                                                   _ [Occ=Dead] _ [Occ=Dead] ->
                                     case ds4 of
                                     { PlutusLedgerApi.V1.Address.Address ww3 [Occ=Once1]
                                                                          ww4 [Occ=Once1] ->
                                     case PlutusLedgerApi.V1.Address.$w$c==
                                            ww3
                                            ww4
                                            addr
                                            (GHC.Maybe.Nothing
                                               @PlutusLedgerApi.V1.Credential.StakingCredential)
                                     of {
                                       GHC.Types.False ->
                                         GHC.Maybe.Nothing @PlutusLedgerApi.V2.Contexts.TxInInfo;
                                       GHC.Types.True ->
                                         GHC.Maybe.Just @PlutusLedgerApi.V2.Contexts.TxInInfo wild
                                     }
                                     }
                                     }
                                     })
                                  `cast` (<PlutusLedgerApi.V2.Contexts.TxInInfo>_R
                                          %<'Many>_N ->_R Sym (Data.Monoid.N:First[0]) <PlutusLedgerApi.V2.Contexts.TxInInfo>_N
                                          :: GHC.Types.Coercible
                                               (PlutusLedgerApi.V2.Contexts.TxInInfo
                                                -> GHC.Maybe.Maybe PlutusLedgerApi.V2.Contexts.TxInInfo)
                                               (PlutusLedgerApi.V2.Contexts.TxInInfo
                                                -> Data.Monoid.First PlutusLedgerApi.V2.Contexts.TxInInfo)))
                                 ww)
                              `cast` (Data.Monoid.N:First[0] <PlutusLedgerApi.V2.Contexts.TxInInfo>_N
                                      :: GHC.Types.Coercible
                                           (Data.Monoid.First PlutusLedgerApi.V2.Contexts.TxInInfo)
                                           (GHC.Maybe.Maybe PlutusLedgerApi.V2.Contexts.TxInInfo))
                         of {
                           GHC.Maybe.Nothing ->
                             case Suites.Plutus.Model.Script.V2.Onchain.Lend.$s$wforwardTo1 of
                             { PlutusLedgerApi.V2.Contexts.TxInInfo ds1 [Occ=Once1]
                                                                    ds2 [Occ=Once1] ->
                             jump $j ds1 ds2
                             };
                           GHC.Maybe.Just a2 [Occ=Once1!] ->
                             case a2 of
                             { PlutusLedgerApi.V2.Contexts.TxInInfo ds1 [Occ=Once1]
                                                                    ds2 [Occ=Once1] ->
                             jump $j ds1 ds2
                             }
                         }
Context: Compiling expr: let {
                           addr [Occ=OnceL1] :: PlutusLedgerApi.V1.Credential.Credential
                           [LclId]
                           addr = PlutusLedgerApi.V1.Credential.ScriptCredential w1 } in
                         join {
                           $w$j [InlPrag=[2], Occ=T[2]]
                             :: PlutusLedgerApi.V1.Tx.TxId
                                -> GHC.Num.Integer.Integer -> GHC.Types.Bool
                           [LclId[JoinId(2)], Arity=2, Str=<L><L>]
                           $w$j (ww2 [Occ=OnceL1, OS=OneShot] :: PlutusLedgerApi.V1.Tx.TxId)
                                (ww3 [Occ=OnceL1, OS=OneShot] :: GHC.Num.Integer.Integer)
                             = let {
                                 ref [Occ=OnceL1] :: PlutusLedgerApi.V1.Tx.TxOutRef
                                 [LclId]
                                 ref = PlutusLedgerApi.V1.Tx.TxOutRef ww2 ww3 } in
                               join {
                                 $j1 [Occ=OnceL1!T[1]]
                                   :: PlutusLedgerApi.V1.Scripts.Redeemer -> GHC.Types.Bool
                                 [LclId[JoinId(1)], Arity=1, Str=<L>]
                                 $j1 (a1 [Occ=Once1, OS=OneShot]
                                        :: PlutusLedgerApi.V1.Scripts.Redeemer)
                                   = PlutusTx.Builtins.Internal.ifThenElse
                                       @GHC.Types.Bool
                                       (PlutusTx.Builtins.Internal.equalsData
                                          (a1
                                           `cast` (PlutusLedgerApi.V1.Scripts.N:Redeemer[0]
                                                   :: GHC.Types.Coercible
                                                        PlutusLedgerApi.V1.Scripts.Redeemer
                                                        PlutusTx.Builtins.Internal.BuiltinData))
                                          (Suites.Plutus.Model.Script.V2.Onchain.Lend.$fToDataLendAct_$ctoBuiltinData
                                             w2))
                                       GHC.Types.True
                                       GHC.Types.False } in
                               joinrec {
                                 go [Occ=LoopBreakerT[1]]
                                   :: [(PlutusLedgerApi.V1.Contexts.ScriptPurpose,
                                        PlutusLedgerApi.V1.Scripts.Redeemer)]
                                      -> GHC.Types.Bool
                                 [LclId[JoinId(1)], Arity=1, Str=<1L>]
                                 go (ds4 [Occ=Once1!]
                                       :: [(PlutusLedgerApi.V1.Contexts.ScriptPurpose,
                                            PlutusLedgerApi.V1.Scripts.Redeemer)])
                                   = case ds4 of {
                                       [] -> GHC.Types.False;
                                       : ds5 [Occ=Once1!] xs' [Occ=Once2] ->
                                         case ds5 of { (c' [Occ=Once1!], i [Occ=Once1]) ->
                                         case c' of {
                                           __DEFAULT -> jump go xs';
                                           PlutusLedgerApi.V1.Contexts.Spending ref1 [Occ=Once1] ->
                                             case PlutusLedgerApi.V1.Tx.$fEqTxOutRef_$c== ref1 ref of {
                                               GHC.Types.False -> jump go xs';
                                               GHC.Types.True -> jump $j1 i
                                             }
                                         }
                                         }
                                     }; } in
                               jump go
                                 (ww1
                                  `cast` (PlutusTx.AssocMap.N:Map[0]
                                              <PlutusLedgerApi.V1.Contexts.ScriptPurpose>_R
                                              <PlutusLedgerApi.V1.Scripts.Redeemer>_R
                                          :: GHC.Types.Coercible
                                               (PlutusTx.AssocMap.Map
                                                  PlutusLedgerApi.V1.Contexts.ScriptPurpose
                                                  PlutusLedgerApi.V1.Scripts.Redeemer)
                                               [(PlutusLedgerApi.V1.Contexts.ScriptPurpose,
                                                 PlutusLedgerApi.V1.Scripts.Redeemer)])) } in
                         join {
                           $j [InlPrag=[2], Occ=Once2!T[2]]
                             :: PlutusLedgerApi.V1.Tx.TxOutRef
                                -> PlutusLedgerApi.V2.Tx.TxOut -> GHC.Types.Bool
                           [LclId[JoinId(2)],
                            Arity=2,
                            Str=<1P(L,L)><A>,
                            Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
                                    WorkFree=True, Expandable=True,
                                    Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
                                    Tmpl= \ (w [Occ=Once1!] :: PlutusLedgerApi.V1.Tx.TxOutRef)
                                            _ [Occ=Dead] ->
                                            case w of
                                            { PlutusLedgerApi.V1.Tx.TxOutRef ww3 [Occ=Once1]
                                                                             ww4 [Occ=Once1] ->
                                            jump $w$j ww3 ww4
                                            }}]
                           $j (w [Occ=Once1!, OS=OneShot] :: PlutusLedgerApi.V1.Tx.TxOutRef)
                              _ [Occ=Dead, OS=OneShot]
                             = case w of
                               { PlutusLedgerApi.V1.Tx.TxOutRef ww3 [Occ=Once1] ww4 [Occ=Once1] ->
                               jump $w$j ww3 ww4
                               } } in
                         case (Plutus.Model.Validator.V2.Plutus.$s$fFoldable[]_$cfoldMap
                                 @PlutusLedgerApi.V2.Contexts.TxInInfo
                                 ((\ (x2 [Occ=Once1!] :: PlutusLedgerApi.V2.Contexts.TxInInfo) ->
                                     case x2 of wild [Occ=Once1]
                                     { PlutusLedgerApi.V2.Contexts.TxInInfo _ [Occ=Dead]
                                                                            ds2 [Occ=Once1!] ->
                                     case ds2 of
                                     { PlutusLedgerApi.V2.Tx.TxOut ds4 [Occ=Once1!] _ [Occ=Dead]
                                                                   _ [Occ=Dead] _ [Occ=Dead] ->
                                     case ds4 of
                                     { PlutusLedgerApi.V1.Address.Address ww3 [Occ=Once1]
                                                                          ww4 [Occ=Once1] ->
                                     case PlutusLedgerApi.V1.Address.$w$c==
                                            ww3
                                            ww4
                                            addr
                                            (GHC.Maybe.Nothing
                                               @PlutusLedgerApi.V1.Credential.StakingCredential)
                                     of {
                                       GHC.Types.False ->
                                         GHC.Maybe.Nothing @PlutusLedgerApi.V2.Contexts.TxInInfo;
                                       GHC.Types.True ->
                                         GHC.Maybe.Just @PlutusLedgerApi.V2.Contexts.TxInInfo wild
                                     }
                                     }
                                     }
                                     })
                                  `cast` (<PlutusLedgerApi.V2.Contexts.TxInInfo>_R
                                          %<'Many>_N ->_R Sym (Data.Monoid.N:First[0]) <PlutusLedgerApi.V2.Contexts.TxInInfo>_N
                                          :: GHC.Types.Coercible
                                               (PlutusLedgerApi.V2.Contexts.TxInInfo
                                                -> GHC.Maybe.Maybe PlutusLedgerApi.V2.Contexts.TxInInfo)
                                               (PlutusLedgerApi.V2.Contexts.TxInInfo
                                                -> Data.Monoid.First PlutusLedgerApi.V2.Contexts.TxInInfo)))
                                 ww)
                              `cast` (Data.Monoid.N:First[0] <PlutusLedgerApi.V2.Contexts.TxInInfo>_N
                                      :: GHC.Types.Coercible
                                           (Data.Monoid.First PlutusLedgerApi.V2.Contexts.TxInInfo)
                                           (GHC.Maybe.Maybe PlutusLedgerApi.V2.Contexts.TxInInfo))
                         of {
                           GHC.Maybe.Nothing ->
                             case Suites.Plutus.Model.Script.V2.Onchain.Lend.$s$wforwardTo1 of
                             { PlutusLedgerApi.V2.Contexts.TxInInfo ds1 [Occ=Once1]
                                                                    ds2 [Occ=Once1] ->
                             jump $j ds1 ds2
                             };
                           GHC.Maybe.Just a2 [Occ=Once1!] ->
                             case a2 of
                             { PlutusLedgerApi.V2.Contexts.TxInInfo ds1 [Occ=Once1]
                                                                    ds2 [Occ=Once1] ->
                             jump $j ds1 ds2
                             }
                         }
Context: Compiling expr: \ (ww1 [Occ=Once1]
                              :: PlutusTx.AssocMap.Map
                                   PlutusLedgerApi.V1.Contexts.ScriptPurpose
                                   PlutusLedgerApi.V1.Scripts.Redeemer) ->
                           let {
                             addr [Occ=OnceL1] :: PlutusLedgerApi.V1.Credential.Credential
                             [LclId]
                             addr = PlutusLedgerApi.V1.Credential.ScriptCredential w1 } in
                           join {
                             $w$j [InlPrag=[2], Occ=T[2]]
                               :: PlutusLedgerApi.V1.Tx.TxId
                                  -> GHC.Num.Integer.Integer -> GHC.Types.Bool
                             [LclId[JoinId(2)], Arity=2, Str=<L><L>]
                             $w$j (ww2 [Occ=OnceL1, OS=OneShot] :: PlutusLedgerApi.V1.Tx.TxId)
                                  (ww3 [Occ=OnceL1, OS=OneShot] :: GHC.Num.Integer.Integer)
                               = let {
                                   ref [Occ=OnceL1] :: PlutusLedgerApi.V1.Tx.TxOutRef
                                   [LclId]
                                   ref = PlutusLedgerApi.V1.Tx.TxOutRef ww2 ww3 } in
                                 join {
                                   $j1 [Occ=OnceL1!T[1]]
                                     :: PlutusLedgerApi.V1.Scripts.Redeemer -> GHC.Types.Bool
                                   [LclId[JoinId(1)], Arity=1, Str=<L>]
                                   $j1 (a1 [Occ=Once1, OS=OneShot]
                                          :: PlutusLedgerApi.V1.Scripts.Redeemer)
                                     = PlutusTx.Builtins.Internal.ifThenElse
                                         @GHC.Types.Bool
                                         (PlutusTx.Builtins.Internal.equalsData
                                            (a1
                                             `cast` (PlutusLedgerApi.V1.Scripts.N:Redeemer[0]
                                                     :: GHC.Types.Coercible
                                                          PlutusLedgerApi.V1.Scripts.Redeemer
                                                          PlutusTx.Builtins.Internal.BuiltinData))
                                            (Suites.Plutus.Model.Script.V2.Onchain.Lend.$fToDataLendAct_$ctoBuiltinData
                                               w2))
                                         GHC.Types.True
                                         GHC.Types.False } in
                                 joinrec {
                                   go [Occ=LoopBreakerT[1]]
                                     :: [(PlutusLedgerApi.V1.Contexts.ScriptPurpose,
                                          PlutusLedgerApi.V1.Scripts.Redeemer)]
                                        -> GHC.Types.Bool
                                   [LclId[JoinId(1)], Arity=1, Str=<1L>]
                                   go (ds4 [Occ=Once1!]
                                         :: [(PlutusLedgerApi.V1.Contexts.ScriptPurpose,
                                              PlutusLedgerApi.V1.Scripts.Redeemer)])
                                     = case ds4 of {
                                         [] -> GHC.Types.False;
                                         : ds5 [Occ=Once1!] xs' [Occ=Once2] ->
                                           case ds5 of { (c' [Occ=Once1!], i [Occ=Once1]) ->
                                           case c' of {
                                             __DEFAULT -> jump go xs';
                                             PlutusLedgerApi.V1.Contexts.Spending ref1 [Occ=Once1] ->
                                               case PlutusLedgerApi.V1.Tx.$fEqTxOutRef_$c== ref1 ref of {
                                                 GHC.Types.False -> jump go xs';
                                                 GHC.Types.True -> jump $j1 i
                                               }
                                           }
                                           }
                                       }; } in
                                 jump go
                                   (ww1
                                    `cast` (PlutusTx.AssocMap.N:Map[0]
                                                <PlutusLedgerApi.V1.Contexts.ScriptPurpose>_R
                                                <PlutusLedgerApi.V1.Scripts.Redeemer>_R
                                            :: GHC.Types.Coercible
                                                 (PlutusTx.AssocMap.Map
                                                    PlutusLedgerApi.V1.Contexts.ScriptPurpose
                                                    PlutusLedgerApi.V1.Scripts.Redeemer)
                                                 [(PlutusLedgerApi.V1.Contexts.ScriptPurpose,
                                                   PlutusLedgerApi.V1.Scripts.Redeemer)])) } in
                           join {
                             $j [InlPrag=[2], Occ=Once2!T[2]]
                               :: PlutusLedgerApi.V1.Tx.TxOutRef
                                  -> PlutusLedgerApi.V2.Tx.TxOut -> GHC.Types.Bool
                             [LclId[JoinId(2)],
                              Arity=2,
                              Str=<1P(L,L)><A>,
                              Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
                                      WorkFree=True, Expandable=True,
                                      Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
                                      Tmpl= \ (w [Occ=Once1!] :: PlutusLedgerApi.V1.Tx.TxOutRef)
                                              _ [Occ=Dead] ->
                                              case w of
                                              { PlutusLedgerApi.V1.Tx.TxOutRef ww3 [Occ=Once1]
                                                                               ww4 [Occ=Once1] ->
                                              jump $w$j ww3 ww4
                                              }}]
                             $j (w [Occ=Once1!, OS=OneShot] :: PlutusLedgerApi.V1.Tx.TxOutRef)
                                _ [Occ=Dead, OS=OneShot]
                               = case w of
                                 { PlutusLedgerApi.V1.Tx.TxOutRef ww3 [Occ=Once1] ww4 [Occ=Once1] ->
                                 jump $w$j ww3 ww4
                                 } } in
                           case (Plutus.Model.Validator.V2.Plutus.$s$fFoldable[]_$cfoldMap
                                   @PlutusLedgerApi.V2.Contexts.TxInInfo
                                   ((\ (x2 [Occ=Once1!] :: PlutusLedgerApi.V2.Contexts.TxInInfo) ->
                                       case x2 of wild [Occ=Once1]
                                       { PlutusLedgerApi.V2.Contexts.TxInInfo _ [Occ=Dead]
                                                                              ds2 [Occ=Once1!] ->
                                       case ds2 of
                                       { PlutusLedgerApi.V2.Tx.TxOut ds4 [Occ=Once1!] _ [Occ=Dead]
                                                                     _ [Occ=Dead] _ [Occ=Dead] ->
                                       case ds4 of
                                       { PlutusLedgerApi.V1.Address.Address ww3 [Occ=Once1]
                                                                            ww4 [Occ=Once1] ->
                                       case PlutusLedgerApi.V1.Address.$w$c==
                                              ww3
                                              ww4
                                              addr
                                              (GHC.Maybe.Nothing
                                                 @PlutusLedgerApi.V1.Credential.StakingCredential)
                                       of {
                                         GHC.Types.False ->
                                           GHC.Maybe.Nothing @PlutusLedgerApi.V2.Contexts.TxInInfo;
                                         GHC.Types.True ->
                                           GHC.Maybe.Just @PlutusLedgerApi.V2.Contexts.TxInInfo wild
                                       }
                                       }
                                       }
                                       })
                                    `cast` (<PlutusLedgerApi.V2.Contexts.TxInInfo>_R
                                            %<'Many>_N ->_R Sym (Data.Monoid.N:First[0]) <PlutusLedgerApi.V2.Contexts.TxInInfo>_N
                                            :: GHC.Types.Coercible
                                                 (PlutusLedgerApi.V2.Contexts.TxInInfo
                                                  -> GHC.Maybe.Maybe PlutusLedgerApi.V2.Contexts.TxInInfo)
                                                 (PlutusLedgerApi.V2.Contexts.TxInInfo
                                                  -> Data.Monoid.First
                                                       PlutusLedgerApi.V2.Contexts.TxInInfo)))
                                   ww)
                                `cast` (Data.Monoid.N:First[0] <PlutusLedgerApi.V2.Contexts.TxInInfo>_N
                                        :: GHC.Types.Coercible
                                             (Data.Monoid.First PlutusLedgerApi.V2.Contexts.TxInInfo)
                                             (GHC.Maybe.Maybe PlutusLedgerApi.V2.Contexts.TxInInfo))
                           of {
                             GHC.Maybe.Nothing ->
                               case Suites.Plutus.Model.Script.V2.Onchain.Lend.$s$wforwardTo1 of
                               { PlutusLedgerApi.V2.Contexts.TxInInfo ds1 [Occ=Once1]
                                                                      ds2 [Occ=Once1] ->
                               jump $j ds1 ds2
                               };
                             GHC.Maybe.Just a2 [Occ=Once1!] ->
                               case a2 of
                               { PlutusLedgerApi.V2.Contexts.TxInInfo ds1 [Occ=Once1]
                                                                      ds2 [Occ=Once1] ->
                               jump $j ds1 ds2
                               }
                           }
Context: Compiling expr: \ (ww [Occ=Once1]
                              :: [PlutusLedgerApi.V2.Contexts.TxInInfo])
                           (ww1 [Occ=Once1]
                              :: PlutusTx.AssocMap.Map
                                   PlutusLedgerApi.V1.Contexts.ScriptPurpose
                                   PlutusLedgerApi.V1.Scripts.Redeemer) ->
                           let {
                             addr [Occ=OnceL1] :: PlutusLedgerApi.V1.Credential.Credential
                             [LclId]
                             addr = PlutusLedgerApi.V1.Credential.ScriptCredential w1 } in
                           join {
                             $w$j [InlPrag=[2], Occ=T[2]]
                               :: PlutusLedgerApi.V1.Tx.TxId
                                  -> GHC.Num.Integer.Integer -> GHC.Types.Bool
                             [LclId[JoinId(2)], Arity=2, Str=<L><L>]
                             $w$j (ww2 [Occ=OnceL1, OS=OneShot] :: PlutusLedgerApi.V1.Tx.TxId)
                                  (ww3 [Occ=OnceL1, OS=OneShot] :: GHC.Num.Integer.Integer)
                               = let {
                                   ref [Occ=OnceL1] :: PlutusLedgerApi.V1.Tx.TxOutRef
                                   [LclId]
                                   ref = PlutusLedgerApi.V1.Tx.TxOutRef ww2 ww3 } in
                                 join {
                                   $j1 [Occ=OnceL1!T[1]]
                                     :: PlutusLedgerApi.V1.Scripts.Redeemer -> GHC.Types.Bool
                                   [LclId[JoinId(1)], Arity=1, Str=<L>]
                                   $j1 (a1 [Occ=Once1, OS=OneShot]
                                          :: PlutusLedgerApi.V1.Scripts.Redeemer)
                                     = PlutusTx.Builtins.Internal.ifThenElse
                                         @GHC.Types.Bool
                                         (PlutusTx.Builtins.Internal.equalsData
                                            (a1
                                             `cast` (PlutusLedgerApi.V1.Scripts.N:Redeemer[0]
                                                     :: GHC.Types.Coercible
                                                          PlutusLedgerApi.V1.Scripts.Redeemer
                                                          PlutusTx.Builtins.Internal.BuiltinData))
                                            (Suites.Plutus.Model.Script.V2.Onchain.Lend.$fToDataLendAct_$ctoBuiltinData
                                               w2))
                                         GHC.Types.True
                                         GHC.Types.False } in
                                 joinrec {
                                   go [Occ=LoopBreakerT[1]]
                                     :: [(PlutusLedgerApi.V1.Contexts.ScriptPurpose,
                                          PlutusLedgerApi.V1.Scripts.Redeemer)]
                                        -> GHC.Types.Bool
                                   [LclId[JoinId(1)], Arity=1, Str=<1L>]
                                   go (ds4 [Occ=Once1!]
                                         :: [(PlutusLedgerApi.V1.Contexts.ScriptPurpose,
                                              PlutusLedgerApi.V1.Scripts.Redeemer)])
                                     = case ds4 of {
                                         [] -> GHC.Types.False;
                                         : ds5 [Occ=Once1!] xs' [Occ=Once2] ->
                                           case ds5 of { (c' [Occ=Once1!], i [Occ=Once1]) ->
                                           case c' of {
                                             __DEFAULT -> jump go xs';
                                             PlutusLedgerApi.V1.Contexts.Spending ref1 [Occ=Once1] ->
                                               case PlutusLedgerApi.V1.Tx.$fEqTxOutRef_$c== ref1 ref of {
                                                 GHC.Types.False -> jump go xs';
                                                 GHC.Types.True -> jump $j1 i
                                               }
                                           }
                                           }
                                       }; } in
                                 jump go
                                   (ww1
                                    `cast` (PlutusTx.AssocMap.N:Map[0]
                                                <PlutusLedgerApi.V1.Contexts.ScriptPurpose>_R
                                                <PlutusLedgerApi.V1.Scripts.Redeemer>_R
                                            :: GHC.Types.Coercible
                                                 (PlutusTx.AssocMap.Map
                                                    PlutusLedgerApi.V1.Contexts.ScriptPurpose
                                                    PlutusLedgerApi.V1.Scripts.Redeemer)
                                                 [(PlutusLedgerApi.V1.Contexts.ScriptPurpose,
                                                   PlutusLedgerApi.V1.Scripts.Redeemer)])) } in
                           join {
                             $j [InlPrag=[2], Occ=Once2!T[2]]
                               :: PlutusLedgerApi.V1.Tx.TxOutRef
                                  -> PlutusLedgerApi.V2.Tx.TxOut -> GHC.Types.Bool
                             [LclId[JoinId(2)],
                              Arity=2,
                              Str=<1P(L,L)><A>,
                              Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
                                      WorkFree=True, Expandable=True,
                                      Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
                                      Tmpl= \ (w [Occ=Once1!] :: PlutusLedgerApi.V1.Tx.TxOutRef)
                                              _ [Occ=Dead] ->
                                              case w of
                                              { PlutusLedgerApi.V1.Tx.TxOutRef ww3 [Occ=Once1]
                                                                               ww4 [Occ=Once1] ->
                                              jump $w$j ww3 ww4
                                              }}]
                             $j (w [Occ=Once1!, OS=OneShot] :: PlutusLedgerApi.V1.Tx.TxOutRef)
                                _ [Occ=Dead, OS=OneShot]
                               = case w of
                                 { PlutusLedgerApi.V1.Tx.TxOutRef ww3 [Occ=Once1] ww4 [Occ=Once1] ->
                                 jump $w$j ww3 ww4
                                 } } in
                           case (Plutus.Model.Validator.V2.Plutus.$s$fFoldable[]_$cfoldMap
                                   @PlutusLedgerApi.V2.Contexts.TxInInfo
                                   ((\ (x2 [Occ=Once1!] :: PlutusLedgerApi.V2.Contexts.TxInInfo) ->
                                       case x2 of wild [Occ=Once1]
                                       { PlutusLedgerApi.V2.Contexts.TxInInfo _ [Occ=Dead]
                                                                              ds2 [Occ=Once1!] ->
                                       case ds2 of
                                       { PlutusLedgerApi.V2.Tx.TxOut ds4 [Occ=Once1!] _ [Occ=Dead]
                                                                     _ [Occ=Dead] _ [Occ=Dead] ->
                                       case ds4 of
                                       { PlutusLedgerApi.V1.Address.Address ww3 [Occ=Once1]
                                                                            ww4 [Occ=Once1] ->
                                       case PlutusLedgerApi.V1.Address.$w$c==
                                              ww3
                                              ww4
                                              addr
                                              (GHC.Maybe.Nothing
                                                 @PlutusLedgerApi.V1.Credential.StakingCredential)
                                       of {
                                         GHC.Types.False ->
                                           GHC.Maybe.Nothing @PlutusLedgerApi.V2.Contexts.TxInInfo;
                                         GHC.Types.True ->
                                           GHC.Maybe.Just @PlutusLedgerApi.V2.Contexts.TxInInfo wild
                                       }
                                       }
                                       }
                                       })
                                    `cast` (<PlutusLedgerApi.V2.Contexts.TxInInfo>_R
                                            %<'Many>_N ->_R Sym (Data.Monoid.N:First[0]) <PlutusLedgerApi.V2.Contexts.TxInInfo>_N
                                            :: GHC.Types.Coercible
                                                 (PlutusLedgerApi.V2.Contexts.TxInInfo
                                                  -> GHC.Maybe.Maybe PlutusLedgerApi.V2.Contexts.TxInInfo)
                                                 (PlutusLedgerApi.V2.Contexts.TxInInfo
                                                  -> Data.Monoid.First
                                                       PlutusLedgerApi.V2.Contexts.TxInInfo)))
                                   ww)
                                `cast` (Data.Monoid.N:First[0] <PlutusLedgerApi.V2.Contexts.TxInInfo>_N
                                        :: GHC.Types.Coercible
                                             (Data.Monoid.First PlutusLedgerApi.V2.Contexts.TxInInfo)
                                             (GHC.Maybe.Maybe PlutusLedgerApi.V2.Contexts.TxInInfo))
                           of {
                             GHC.Maybe.Nothing ->
                               case Suites.Plutus.Model.Script.V2.Onchain.Lend.$s$wforwardTo1 of
                               { PlutusLedgerApi.V2.Contexts.TxInInfo ds1 [Occ=Once1]
                                                                      ds2 [Occ=Once1] ->
                               jump $j ds1 ds2
                               };
                             GHC.Maybe.Just a2 [Occ=Once1!] ->
                               case a2 of
                               { PlutusLedgerApi.V2.Contexts.TxInInfo ds1 [Occ=Once1]
                                                                      ds2 [Occ=Once1] ->
                               jump $j ds1 ds2
                               }
                           }
Context: Compiling expr: \ (w2 [Occ=Once1]
                              :: Suites.Plutus.Model.Script.V2.Onchain.Lend.LendAct)
                           (ww [Occ=Once1] :: [PlutusLedgerApi.V2.Contexts.TxInInfo])
                           (ww1 [Occ=Once1]
                              :: PlutusTx.AssocMap.Map
                                   PlutusLedgerApi.V1.Contexts.ScriptPurpose
                                   PlutusLedgerApi.V1.Scripts.Redeemer) ->
                           let {
                             addr [Occ=OnceL1] :: PlutusLedgerApi.V1.Credential.Credential
                             [LclId]
                             addr = PlutusLedgerApi.V1.Credential.ScriptCredential w1 } in
                           join {
                             $w$j [InlPrag=[2], Occ=T[2]]
                               :: PlutusLedgerApi.V1.Tx.TxId
                                  -> GHC.Num.Integer.Integer -> GHC.Types.Bool
                             [LclId[JoinId(2)], Arity=2, Str=<L><L>]
                             $w$j (ww2 [Occ=OnceL1, OS=OneShot] :: PlutusLedgerApi.V1.Tx.TxId)
                                  (ww3 [Occ=OnceL1, OS=OneShot] :: GHC.Num.Integer.Integer)
                               = let {
                                   ref [Occ=OnceL1] :: PlutusLedgerApi.V1.Tx.TxOutRef
                                   [LclId]
                                   ref = PlutusLedgerApi.V1.Tx.TxOutRef ww2 ww3 } in
                                 join {
                                   $j1 [Occ=OnceL1!T[1]]
                                     :: PlutusLedgerApi.V1.Scripts.Redeemer -> GHC.Types.Bool
                                   [LclId[JoinId(1)], Arity=1, Str=<L>]
                                   $j1 (a1 [Occ=Once1, OS=OneShot]
                                          :: PlutusLedgerApi.V1.Scripts.Redeemer)
                                     = PlutusTx.Builtins.Internal.ifThenElse
                                         @GHC.Types.Bool
                                         (PlutusTx.Builtins.Internal.equalsData
                                            (a1
                                             `cast` (PlutusLedgerApi.V1.Scripts.N:Redeemer[0]
                                                     :: GHC.Types.Coercible
                                                          PlutusLedgerApi.V1.Scripts.Redeemer
                                                          PlutusTx.Builtins.Internal.BuiltinData))
                                            (Suites.Plutus.Model.Script.V2.Onchain.Lend.$fToDataLendAct_$ctoBuiltinData
                                               w2))
                                         GHC.Types.True
                                         GHC.Types.False } in
                                 joinrec {
                                   go [Occ=LoopBreakerT[1]]
                                     :: [(PlutusLedgerApi.V1.Contexts.ScriptPurpose,
                                          PlutusLedgerApi.V1.Scripts.Redeemer)]
                                        -> GHC.Types.Bool
                                   [LclId[JoinId(1)], Arity=1, Str=<1L>]
                                   go (ds4 [Occ=Once1!]
                                         :: [(PlutusLedgerApi.V1.Contexts.ScriptPurpose,
                                              PlutusLedgerApi.V1.Scripts.Redeemer)])
                                     = case ds4 of {
                                         [] -> GHC.Types.False;
                                         : ds5 [Occ=Once1!] xs' [Occ=Once2] ->
                                           case ds5 of { (c' [Occ=Once1!], i [Occ=Once1]) ->
                                           case c' of {
                                             __DEFAULT -> jump go xs';
                                             PlutusLedgerApi.V1.Contexts.Spending ref1 [Occ=Once1] ->
                                               case PlutusLedgerApi.V1.Tx.$fEqTxOutRef_$c== ref1 ref of {
                                                 GHC.Types.False -> jump go xs';
                                                 GHC.Types.True -> jump $j1 i
                                               }
                                           }
                                           }
                                       }; } in
                                 jump go
                                   (ww1
                                    `cast` (PlutusTx.AssocMap.N:Map[0]
                                                <PlutusLedgerApi.V1.Contexts.ScriptPurpose>_R
                                                <PlutusLedgerApi.V1.Scripts.Redeemer>_R
                                            :: GHC.Types.Coercible
                                                 (PlutusTx.AssocMap.Map
                                                    PlutusLedgerApi.V1.Contexts.ScriptPurpose
                                                    PlutusLedgerApi.V1.Scripts.Redeemer)
                                                 [(PlutusLedgerApi.V1.Contexts.ScriptPurpose,
                                                   PlutusLedgerApi.V1.Scripts.Redeemer)])) } in
                           join {
                             $j [InlPrag=[2], Occ=Once2!T[2]]
                               :: PlutusLedgerApi.V1.Tx.TxOutRef
                                  -> PlutusLedgerApi.V2.Tx.TxOut -> GHC.Types.Bool
                             [LclId[JoinId(2)],
                              Arity=2,
                              Str=<1P(L,L)><A>,
                              Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
                                      WorkFree=True, Expandable=True,
                                      Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
                                      Tmpl= \ (w [Occ=Once1!] :: PlutusLedgerApi.V1.Tx.TxOutRef)
                                              _ [Occ=Dead] ->
                                              case w of
                                              { PlutusLedgerApi.V1.Tx.TxOutRef ww3 [Occ=Once1]
                                                                               ww4 [Occ=Once1] ->
                                              jump $w$j ww3 ww4
                                              }}]
                             $j (w [Occ=Once1!, OS=OneShot] :: PlutusLedgerApi.V1.Tx.TxOutRef)
                                _ [Occ=Dead, OS=OneShot]
                               = case w of
                                 { PlutusLedgerApi.V1.Tx.TxOutRef ww3 [Occ=Once1] ww4 [Occ=Once1] ->
                                 jump $w$j ww3 ww4
                                 } } in
                           case (Plutus.Model.Validator.V2.Plutus.$s$fFoldable[]_$cfoldMap
                                   @PlutusLedgerApi.V2.Contexts.TxInInfo
                                   ((\ (x2 [Occ=Once1!] :: PlutusLedgerApi.V2.Contexts.TxInInfo) ->
                                       case x2 of wild [Occ=Once1]
                                       { PlutusLedgerApi.V2.Contexts.TxInInfo _ [Occ=Dead]
                                                                              ds2 [Occ=Once1!] ->
                                       case ds2 of
                                       { PlutusLedgerApi.V2.Tx.TxOut ds4 [Occ=Once1!] _ [Occ=Dead]
                                                                     _ [Occ=Dead] _ [Occ=Dead] ->
                                       case ds4 of
                                       { PlutusLedgerApi.V1.Address.Address ww3 [Occ=Once1]
                                                                            ww4 [Occ=Once1] ->
                                       case PlutusLedgerApi.V1.Address.$w$c==
                                              ww3
                                              ww4
                                              addr
                                              (GHC.Maybe.Nothing
                                                 @PlutusLedgerApi.V1.Credential.StakingCredential)
                                       of {
                                         GHC.Types.False ->
                                           GHC.Maybe.Nothing @PlutusLedgerApi.V2.Contexts.TxInInfo;
                                         GHC.Types.True ->
                                           GHC.Maybe.Just @PlutusLedgerApi.V2.Contexts.TxInInfo wild
                                       }
                                       }
                                       }
                                       })
                                    `cast` (<PlutusLedgerApi.V2.Contexts.TxInInfo>_R
                                            %<'Many>_N ->_R Sym (Data.Monoid.N:First[0]) <PlutusLedgerApi.V2.Contexts.TxInInfo>_N
                                            :: GHC.Types.Coercible
                                                 (PlutusLedgerApi.V2.Contexts.TxInInfo
                                                  -> GHC.Maybe.Maybe PlutusLedgerApi.V2.Contexts.TxInInfo)
                                                 (PlutusLedgerApi.V2.Contexts.TxInInfo
                                                  -> Data.Monoid.First
                                                       PlutusLedgerApi.V2.Contexts.TxInInfo)))
                                   ww)
                                `cast` (Data.Monoid.N:First[0] <PlutusLedgerApi.V2.Contexts.TxInInfo>_N
                                        :: GHC.Types.Coercible
                                             (Data.Monoid.First PlutusLedgerApi.V2.Contexts.TxInInfo)
                                             (GHC.Maybe.Maybe PlutusLedgerApi.V2.Contexts.TxInInfo))
                           of {
                             GHC.Maybe.Nothing ->
                               case Suites.Plutus.Model.Script.V2.Onchain.Lend.$s$wforwardTo1 of
                               { PlutusLedgerApi.V2.Contexts.TxInInfo ds1 [Occ=Once1]
                                                                      ds2 [Occ=Once1] ->
                               jump $j ds1 ds2
                               };
                             GHC.Maybe.Just a2 [Occ=Once1!] ->
                               case a2 of
                               { PlutusLedgerApi.V2.Contexts.TxInInfo ds1 [Occ=Once1]
                                                                      ds2 [Occ=Once1] ->
                               jump $j ds1 ds2
                               }
                           }
Context: Compiling expr: \ (w1 [Occ=OnceL1]
                              :: PlutusLedgerApi.V1.Scripts.ScriptHash)
                           (w2 [Occ=Once1]
                              :: Suites.Plutus.Model.Script.V2.Onchain.Lend.LendAct)
                           (ww [Occ=Once1] :: [PlutusLedgerApi.V2.Contexts.TxInInfo])
                           (ww1 [Occ=Once1]
                              :: PlutusTx.AssocMap.Map
                                   PlutusLedgerApi.V1.Contexts.ScriptPurpose
                                   PlutusLedgerApi.V1.Scripts.Redeemer) ->
                           let {
                             addr [Occ=OnceL1] :: PlutusLedgerApi.V1.Credential.Credential
                             [LclId]
                             addr = PlutusLedgerApi.V1.Credential.ScriptCredential w1 } in
                           join {
                             $w$j [InlPrag=[2], Occ=T[2]]
                               :: PlutusLedgerApi.V1.Tx.TxId
                                  -> GHC.Num.Integer.Integer -> GHC.Types.Bool
                             [LclId[JoinId(2)], Arity=2, Str=<L><L>]
                             $w$j (ww2 [Occ=OnceL1, OS=OneShot] :: PlutusLedgerApi.V1.Tx.TxId)
                                  (ww3 [Occ=OnceL1, OS=OneShot] :: GHC.Num.Integer.Integer)
                               = let {
                                   ref [Occ=OnceL1] :: PlutusLedgerApi.V1.Tx.TxOutRef
                                   [LclId]
                                   ref = PlutusLedgerApi.V1.Tx.TxOutRef ww2 ww3 } in
                                 join {
                                   $j1 [Occ=OnceL1!T[1]]
                                     :: PlutusLedgerApi.V1.Scripts.Redeemer -> GHC.Types.Bool
                                   [LclId[JoinId(1)], Arity=1, Str=<L>]
                                   $j1 (a1 [Occ=Once1, OS=OneShot]
                                          :: PlutusLedgerApi.V1.Scripts.Redeemer)
                                     = PlutusTx.Builtins.Internal.ifThenElse
                                         @GHC.Types.Bool
                                         (PlutusTx.Builtins.Internal.equalsData
                                            (a1
                                             `cast` (PlutusLedgerApi.V1.Scripts.N:Redeemer[0]
                                                     :: GHC.Types.Coercible
                                                          PlutusLedgerApi.V1.Scripts.Redeemer
                                                          PlutusTx.Builtins.Internal.BuiltinData))
                                            (Suites.Plutus.Model.Script.V2.Onchain.Lend.$fToDataLendAct_$ctoBuiltinData
                                               w2))
                                         GHC.Types.True
                                         GHC.Types.False } in
                                 joinrec {
                                   go [Occ=LoopBreakerT[1]]
                                     :: [(PlutusLedgerApi.V1.Contexts.ScriptPurpose,
                                          PlutusLedgerApi.V1.Scripts.Redeemer)]
                                        -> GHC.Types.Bool
                                   [LclId[JoinId(1)], Arity=1, Str=<1L>]
                                   go (ds4 [Occ=Once1!]
                                         :: [(PlutusLedgerApi.V1.Contexts.ScriptPurpose,
                                              PlutusLedgerApi.V1.Scripts.Redeemer)])
                                     = case ds4 of {
                                         [] -> GHC.Types.False;
                                         : ds5 [Occ=Once1!] xs' [Occ=Once2] ->
                                           case ds5 of { (c' [Occ=Once1!], i [Occ=Once1]) ->
                                           case c' of {
                                             __DEFAULT -> jump go xs';
                                             PlutusLedgerApi.V1.Contexts.Spending ref1 [Occ=Once1] ->
                                               case PlutusLedgerApi.V1.Tx.$fEqTxOutRef_$c== ref1 ref of {
                                                 GHC.Types.False -> jump go xs';
                                                 GHC.Types.True -> jump $j1 i
                                               }
                                           }
                                           }
                                       }; } in
                                 jump go
                                   (ww1
                                    `cast` (PlutusTx.AssocMap.N:Map[0]
                                                <PlutusLedgerApi.V1.Contexts.ScriptPurpose>_R
                                                <PlutusLedgerApi.V1.Scripts.Redeemer>_R
                                            :: GHC.Types.Coercible
                                                 (PlutusTx.AssocMap.Map
                                                    PlutusLedgerApi.V1.Contexts.ScriptPurpose
                                                    PlutusLedgerApi.V1.Scripts.Redeemer)
                                                 [(PlutusLedgerApi.V1.Contexts.ScriptPurpose,
                                                   PlutusLedgerApi.V1.Scripts.Redeemer)])) } in
                           join {
                             $j [InlPrag=[2], Occ=Once2!T[2]]
                               :: PlutusLedgerApi.V1.Tx.TxOutRef
                                  -> PlutusLedgerApi.V2.Tx.TxOut -> GHC.Types.Bool
                             [LclId[JoinId(2)],
                              Arity=2,
                              Str=<1P(L,L)><A>,
                              Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
                                      WorkFree=True, Expandable=True,
                                      Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
                                      Tmpl= \ (w [Occ=Once1!] :: PlutusLedgerApi.V1.Tx.TxOutRef)
                                              _ [Occ=Dead] ->
                                              case w of
                                              { PlutusLedgerApi.V1.Tx.TxOutRef ww3 [Occ=Once1]
                                                                               ww4 [Occ=Once1] ->
                                              jump $w$j ww3 ww4
                                              }}]
                             $j (w [Occ=Once1!, OS=OneShot] :: PlutusLedgerApi.V1.Tx.TxOutRef)
                                _ [Occ=Dead, OS=OneShot]
                               = case w of
                                 { PlutusLedgerApi.V1.Tx.TxOutRef ww3 [Occ=Once1] ww4 [Occ=Once1] ->
                                 jump $w$j ww3 ww4
                                 } } in
                           case (Plutus.Model.Validator.V2.Plutus.$s$fFoldable[]_$cfoldMap
                                   @PlutusLedgerApi.V2.Contexts.TxInInfo
                                   ((\ (x2 [Occ=Once1!] :: PlutusLedgerApi.V2.Contexts.TxInInfo) ->
                                       case x2 of wild [Occ=Once1]
                                       { PlutusLedgerApi.V2.Contexts.TxInInfo _ [Occ=Dead]
                                                                              ds2 [Occ=Once1!] ->
                                       case ds2 of
                                       { PlutusLedgerApi.V2.Tx.TxOut ds4 [Occ=Once1!] _ [Occ=Dead]
                                                                     _ [Occ=Dead] _ [Occ=Dead] ->
                                       case ds4 of
                                       { PlutusLedgerApi.V1.Address.Address ww3 [Occ=Once1]
                                                                            ww4 [Occ=Once1] ->
                                       case PlutusLedgerApi.V1.Address.$w$c==
                                              ww3
                                              ww4
                                              addr
                                              (GHC.Maybe.Nothing
                                                 @PlutusLedgerApi.V1.Credential.StakingCredential)
                                       of {
                                         GHC.Types.False ->
                                           GHC.Maybe.Nothing @PlutusLedgerApi.V2.Contexts.TxInInfo;
                                         GHC.Types.True ->
                                           GHC.Maybe.Just @PlutusLedgerApi.V2.Contexts.TxInInfo wild
                                       }
                                       }
                                       }
                                       })
                                    `cast` (<PlutusLedgerApi.V2.Contexts.TxInInfo>_R
                                            %<'Many>_N ->_R Sym (Data.Monoid.N:First[0]) <PlutusLedgerApi.V2.Contexts.TxInInfo>_N
                                            :: GHC.Types.Coercible
                                                 (PlutusLedgerApi.V2.Contexts.TxInInfo
                                                  -> GHC.Maybe.Maybe PlutusLedgerApi.V2.Contexts.TxInInfo)
                                                 (PlutusLedgerApi.V2.Contexts.TxInInfo
                                                  -> Data.Monoid.First
                                                       PlutusLedgerApi.V2.Contexts.TxInInfo)))
                                   ww)
                                `cast` (Data.Monoid.N:First[0] <PlutusLedgerApi.V2.Contexts.TxInInfo>_N
                                        :: GHC.Types.Coercible
                                             (Data.Monoid.First PlutusLedgerApi.V2.Contexts.TxInInfo)
                                             (GHC.Maybe.Maybe PlutusLedgerApi.V2.Contexts.TxInInfo))
                           of {
                             GHC.Maybe.Nothing ->
                               case Suites.Plutus.Model.Script.V2.Onchain.Lend.$s$wforwardTo1 of
                               { PlutusLedgerApi.V2.Contexts.TxInInfo ds1 [Occ=Once1]
                                                                      ds2 [Occ=Once1] ->
                               jump $j ds1 ds2
                               };
                             GHC.Maybe.Just a2 [Occ=Once1!] ->
                               case a2 of
                               { PlutusLedgerApi.V2.Contexts.TxInInfo ds1 [Occ=Once1]
                                                                      ds2 [Occ=Once1] ->
                               jump $j ds1 ds2
                               }
                           }
Context: Compiling definition of: Suites.Plutus.Model.Script.V2.Onchain.Lend.$s$wforwardTo
Context: Compiling expr: Suites.Plutus.Model.Script.V2.Onchain.Lend.$s$wforwardTo
Context: Compiling expr: Suites.Plutus.Model.Script.V2.Onchain.Lend.$s$wforwardTo
                           (w
                            `cast` (Suites.Plutus.Model.Script.V2.Onchain.Lend.N:LendMintParams[0]
                                    ; Suites.Plutus.Model.Script.V2.Onchain.Lend.N:LendHash[0]
                                    :: GHC.Types.Coercible
                                         Suites.Plutus.Model.Script.V2.Onchain.Lend.LendMintParams
                                         PlutusLedgerApi.V1.Scripts.ScriptHash))
Context: Compiling expr: Suites.Plutus.Model.Script.V2.Onchain.Lend.$s$wforwardTo
                           (w
                            `cast` (Suites.Plutus.Model.Script.V2.Onchain.Lend.N:LendMintParams[0]
                                    ; Suites.Plutus.Model.Script.V2.Onchain.Lend.N:LendHash[0]
                                    :: GHC.Types.Coercible
                                         Suites.Plutus.Model.Script.V2.Onchain.Lend.LendMintParams
                                         PlutusLedgerApi.V1.Scripts.ScriptHash))
                           Suites.Plutus.Model.Script.V2.Onchain.Lend.Exchange
Context: Compiling expr: Suites.Plutus.Model.Script.V2.Onchain.Lend.$s$wforwardTo
                           (w
                            `cast` (Suites.Plutus.Model.Script.V2.Onchain.Lend.N:LendMintParams[0]
                                    ; Suites.Plutus.Model.Script.V2.Onchain.Lend.N:LendHash[0]
                                    :: GHC.Types.Coercible
                                         Suites.Plutus.Model.Script.V2.Onchain.Lend.LendMintParams
                                         PlutusLedgerApi.V1.Scripts.ScriptHash))
                           Suites.Plutus.Model.Script.V2.Onchain.Lend.Exchange
                           ww
Context: Compiling expr: Suites.Plutus.Model.Script.V2.Onchain.Lend.$s$wforwardTo
                           (w
                            `cast` (Suites.Plutus.Model.Script.V2.Onchain.Lend.N:LendMintParams[0]
                                    ; Suites.Plutus.Model.Script.V2.Onchain.Lend.N:LendHash[0]
                                    :: GHC.Types.Coercible
                                         Suites.Plutus.Model.Script.V2.Onchain.Lend.LendMintParams
                                         PlutusLedgerApi.V1.Scripts.ScriptHash))
                           Suites.Plutus.Model.Script.V2.Onchain.Lend.Exchange
                           ww
                           ww1
Context: Compiling expr: case Suites.Plutus.Model.Script.V2.Onchain.Lend.$s$wforwardTo
                                (w
                                 `cast` (Suites.Plutus.Model.Script.V2.Onchain.Lend.N:LendMintParams[0]
                                         ; Suites.Plutus.Model.Script.V2.Onchain.Lend.N:LendHash[0]
                                         :: GHC.Types.Coercible
                                              Suites.Plutus.Model.Script.V2.Onchain.Lend.LendMintParams
                                              PlutusLedgerApi.V1.Scripts.ScriptHash))
                                Suites.Plutus.Model.Script.V2.Onchain.Lend.Exchange
                                ww
                                ww1
                         of {
                           GHC.Types.False ->
                             PlutusTx.Builtins.Internal.trace
                               @GHC.Types.Bool
                               (GHC.Magic.noinline
                                  @(GHC.Base.String -> PlutusTx.Builtins.Internal.BuiltinString)
                                  PlutusTx.Builtins.Class.stringToBuiltinString
                                  (GHC.Base.build
                                     @GHC.Types.Char
                                     (\ (@b) ->
                                        GHC.CString.unpackFoldrCString#
                                          @b "Lend contract is spent with Exchange redeemer"#)))
                               GHC.Types.False;
                           GHC.Types.True -> GHC.Types.True
                         }
Context: Compiling expr: \ (ww1 [Occ=Once1]
                              :: PlutusTx.AssocMap.Map
                                   PlutusLedgerApi.V1.Contexts.ScriptPurpose
                                   PlutusLedgerApi.V1.Scripts.Redeemer) ->
                           case Suites.Plutus.Model.Script.V2.Onchain.Lend.$s$wforwardTo
                                  (w
                                   `cast` (Suites.Plutus.Model.Script.V2.Onchain.Lend.N:LendMintParams[0]
                                           ; Suites.Plutus.Model.Script.V2.Onchain.Lend.N:LendHash[0]
                                           :: GHC.Types.Coercible
                                                Suites.Plutus.Model.Script.V2.Onchain.Lend.LendMintParams
                                                PlutusLedgerApi.V1.Scripts.ScriptHash))
                                  Suites.Plutus.Model.Script.V2.Onchain.Lend.Exchange
                                  ww
                                  ww1
                           of {
                             GHC.Types.False ->
                               PlutusTx.Builtins.Internal.trace
                                 @GHC.Types.Bool
                                 (GHC.Magic.noinline
                                    @(GHC.Base.String -> PlutusTx.Builtins.Internal.BuiltinString)
                                    PlutusTx.Builtins.Class.stringToBuiltinString
                                    (GHC.Base.build
                                       @GHC.Types.Char
                                       (\ (@b) ->
                                          GHC.CString.unpackFoldrCString#
                                            @b "Lend contract is spent with Exchange redeemer"#)))
                                 GHC.Types.False;
                             GHC.Types.True -> GHC.Types.True
                           }
Context: Compiling expr: \ (ww [Occ=Once1]
                              :: [PlutusLedgerApi.V2.Contexts.TxInInfo])
                           (ww1 [Occ=Once1]
                              :: PlutusTx.AssocMap.Map
                                   PlutusLedgerApi.V1.Contexts.ScriptPurpose
                                   PlutusLedgerApi.V1.Scripts.Redeemer) ->
                           case Suites.Plutus.Model.Script.V2.Onchain.Lend.$s$wforwardTo
                                  (w
                                   `cast` (Suites.Plutus.Model.Script.V2.Onchain.Lend.N:LendMintParams[0]
                                           ; Suites.Plutus.Model.Script.V2.Onchain.Lend.N:LendHash[0]
                                           :: GHC.Types.Coercible
                                                Suites.Plutus.Model.Script.V2.Onchain.Lend.LendMintParams
                                                PlutusLedgerApi.V1.Scripts.ScriptHash))
                                  Suites.Plutus.Model.Script.V2.Onchain.Lend.Exchange
                                  ww
                                  ww1
                           of {
                             GHC.Types.False ->
                               PlutusTx.Builtins.Internal.trace
                                 @GHC.Types.Bool
                                 (GHC.Magic.noinline
                                    @(GHC.Base.String -> PlutusTx.Builtins.Internal.BuiltinString)
                                    PlutusTx.Builtins.Class.stringToBuiltinString
                                    (GHC.Base.build
                                       @GHC.Types.Char
                                       (\ (@b) ->
                                          GHC.CString.unpackFoldrCString#
                                            @b "Lend contract is spent with Exchange redeemer"#)))
                                 GHC.Types.False;
                             GHC.Types.True -> GHC.Types.True
                           }
Context: Compiling expr: \ (w [Occ=Once1]
                              :: Suites.Plutus.Model.Script.V2.Onchain.Lend.LendMintParams)
                           (ww [Occ=Once1] :: [PlutusLedgerApi.V2.Contexts.TxInInfo])
                           (ww1 [Occ=Once1]
                              :: PlutusTx.AssocMap.Map
                                   PlutusLedgerApi.V1.Contexts.ScriptPurpose
                                   PlutusLedgerApi.V1.Scripts.Redeemer) ->
                           case Suites.Plutus.Model.Script.V2.Onchain.Lend.$s$wforwardTo
                                  (w
                                   `cast` (Suites.Plutus.Model.Script.V2.Onchain.Lend.N:LendMintParams[0]
                                           ; Suites.Plutus.Model.Script.V2.Onchain.Lend.N:LendHash[0]
                                           :: GHC.Types.Coercible
                                                Suites.Plutus.Model.Script.V2.Onchain.Lend.LendMintParams
                                                PlutusLedgerApi.V1.Scripts.ScriptHash))
                                  Suites.Plutus.Model.Script.V2.Onchain.Lend.Exchange
                                  ww
                                  ww1
                           of {
                             GHC.Types.False ->
                               PlutusTx.Builtins.Internal.trace
                                 @GHC.Types.Bool
                                 (GHC.Magic.noinline
                                    @(GHC.Base.String -> PlutusTx.Builtins.Internal.BuiltinString)
                                    PlutusTx.Builtins.Class.stringToBuiltinString
                                    (GHC.Base.build
                                       @GHC.Types.Char
                                       (\ (@b) ->
                                          GHC.CString.unpackFoldrCString#
                                            @b "Lend contract is spent with Exchange redeemer"#)))
                                 GHC.Types.False;
                             GHC.Types.True -> GHC.Types.True
                           }
Context: Compiling definition of: Suites.Plutus.Model.Script.V2.Onchain.Lend.$wlendPolicyContract
Context: Compiling expr: Suites.Plutus.Model.Script.V2.Onchain.Lend.$wlendPolicyContract
Context: Compiling expr: Suites.Plutus.Model.Script.V2.Onchain.Lend.$wlendPolicyContract
                           w
Context: Compiling expr: Suites.Plutus.Model.Script.V2.Onchain.Lend.$wlendPolicyContract
                           w ww4
Context: Compiling expr: Suites.Plutus.Model.Script.V2.Onchain.Lend.$wlendPolicyContract
                           w ww4 ww13
Context: Creating alternative: PlutusLedgerApi.V2.Contexts.TxInfo
Context: Compiling expr: case ww1 of
                         { PlutusLedgerApi.V2.Contexts.TxInfo ww4 [Occ=Once1] _ [Occ=Dead]
                                                              _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                                              _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                                              _ [Occ=Dead] ww13 [Occ=Once1] _ [Occ=Dead]
                                                              _ [Occ=Dead] ->
                         Suites.Plutus.Model.Script.V2.Onchain.Lend.$wlendPolicyContract
                           w ww4 ww13
                         }
Context: Creating alternative: PlutusLedgerApi.V2.Contexts.ScriptContext
Context: Compiling expr: case w2 of
                         { PlutusLedgerApi.V2.Contexts.ScriptContext ww1 [Occ=Once1!]
                                                                     _ [Occ=Dead] ->
                         case ww1 of
                         { PlutusLedgerApi.V2.Contexts.TxInfo ww4 [Occ=Once1] _ [Occ=Dead]
                                                              _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                                              _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                                              _ [Occ=Dead] ww13 [Occ=Once1] _ [Occ=Dead]
                                                              _ [Occ=Dead] ->
                         Suites.Plutus.Model.Script.V2.Onchain.Lend.$wlendPolicyContract
                           w ww4 ww13
                         }
                         }
Context: Compiling expr: \ (w2 [Occ=Once1!]
                              :: PlutusLedgerApi.V2.Contexts.ScriptContext) ->
                           case w2 of
                           { PlutusLedgerApi.V2.Contexts.ScriptContext ww1 [Occ=Once1!]
                                                                       _ [Occ=Dead] ->
                           case ww1 of
                           { PlutusLedgerApi.V2.Contexts.TxInfo ww4 [Occ=Once1] _ [Occ=Dead]
                                                                _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                                                _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                                                _ [Occ=Dead] ww13 [Occ=Once1] _ [Occ=Dead]
                                                                _ [Occ=Dead] ->
                           Suites.Plutus.Model.Script.V2.Onchain.Lend.$wlendPolicyContract
                             w ww4 ww13
                           }
                           }
Context: Compiling expr: \ _ [Occ=Dead]
                           (w2 [Occ=Once1!] :: PlutusLedgerApi.V2.Contexts.ScriptContext) ->
                           case w2 of
                           { PlutusLedgerApi.V2.Contexts.ScriptContext ww1 [Occ=Once1!]
                                                                       _ [Occ=Dead] ->
                           case ww1 of
                           { PlutusLedgerApi.V2.Contexts.TxInfo ww4 [Occ=Once1] _ [Occ=Dead]
                                                                _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                                                _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                                                _ [Occ=Dead] ww13 [Occ=Once1] _ [Occ=Dead]
                                                                _ [Occ=Dead] ->
                           Suites.Plutus.Model.Script.V2.Onchain.Lend.$wlendPolicyContract
                             w ww4 ww13
                           }
                           }
Context: Compiling expr: \ (w [Occ=Once1]
                              :: Suites.Plutus.Model.Script.V2.Onchain.Lend.LendMintParams)
                           _ [Occ=Dead]
                           (w2 [Occ=Once1!] :: PlutusLedgerApi.V2.Contexts.ScriptContext) ->
                           case w2 of
                           { PlutusLedgerApi.V2.Contexts.ScriptContext ww1 [Occ=Once1!]
                                                                       _ [Occ=Dead] ->
                           case ww1 of
                           { PlutusLedgerApi.V2.Contexts.TxInfo ww4 [Occ=Once1] _ [Occ=Dead]
                                                                _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                                                _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                                                _ [Occ=Dead] ww13 [Occ=Once1] _ [Occ=Dead]
                                                                _ [Occ=Dead] ->
                           Suites.Plutus.Model.Script.V2.Onchain.Lend.$wlendPolicyContract
                             w ww4 ww13
                           }
                           }
Context: Compiling definition of: Suites.Plutus.Model.Script.V2.Onchain.Lend.lendPolicyContract
Context: Compiling expr: Suites.Plutus.Model.Script.V2.Onchain.Lend.lendPolicyContract
Context: Compiling expr: Suites.Plutus.Model.Script.V2.Onchain.Lend.lendPolicyContract
                           param_acG9
Context: Compiling expr: Plutus.Model.Validator.V2.toBuiltinPolicy
                           @()
                           PlutusTx.IsData.Instances.$fUnsafeFromData()
                           (Suites.Plutus.Model.Script.V2.Onchain.Lend.lendPolicyContract
                              param_acG9)
Context: Compiling expr: \ (param_acG9 [Occ=Once1]
                              :: Suites.Plutus.Model.Script.V2.Onchain.Lend.LendMintParams) ->
                           Plutus.Model.Validator.V2.toBuiltinPolicy
                             @()
                             PlutusTx.IsData.Instances.$fUnsafeFromData()
                             (Suites.Plutus.Model.Script.V2.Onchain.Lend.lendPolicyContract
                                param_acG9)
Context: Compiling expr at "main:Suites.Plutus.Model.Script.V2.Onchain.Lend.Script:(34,7)-(34,84)"
